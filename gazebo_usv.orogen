name "gazebo_usv"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "gazebo_usvTypes.hpp"

import_types_from "std"
import_types_from "base"

using_library "gazebo"
using_library "base-logging"
using_library "uuv_tether_control"
import_types_from "uuv_tether_control/TetherDragAndInertiaConfig.hpp"
import_types_from "uuv_tether_control/TetherDragAndInertiaState.hpp"
using_task_library "rock_gazebo"

task_context 'WindSourceTask', subclasses: 'rock_gazebo::ModelPluginTask' do
    needs_configuration

    exception_states 'NO_TOPIC_CONNECTION'

    # Plugin full name
    attribute 'name', '/std/string'

    # Wind velocity input port
    input_port 'wind_velocity', '/base/Vector3d'
end

task_context 'WaveSourceTask', subclasses: 'rock_gazebo::ModelPluginTask' do
    needs_configuration

    exception_states 'NO_TOPIC_CONNECTION'

    # Plugin full name
    attribute 'name', '/std/string'

    # Wave velocity input port
    input_port 'wave_velocity', '/base/Vector3d'
    input_port 'wave_frequency', '/base/Vector3d'
end

task_context "DirectForceApplicationTask", subclasses: "rock_gazebo::ModelPluginTask" do
    needs_configuration

    # The link name follows the format: "${model}/${link}"
    property "link_name", "/std/string"

    # The force, as a vector, to be applied on ${link_name}
    input_port "force", "/base/Vector3d"
end

task_context 'TetherSimulationTask' do
    needs_configuration

    # The max length that the tether can achieve
    property 'max_tether_length', '/double'

    property 'tether_config', '/uuv_tether_control/TetherDragAndInertiaConfig'
    
    # The rov's link where the tether is attached
    input_port 'rov_attachment', '/base/samples/RigidBodyState'

    # The usv's link where the tether is attached   
    input_port 'usv_attachment', '/base/samples/RigidBodyState'
   
    # Water speed over ground, expressed in the rov 
    input_port 'water_speed', '/base/Vector3d'

    output_port 'rov_force', 'base/Vector3d'
   
    output_port 'usv_force', '/base/Vector3d'

    port_driven
end
